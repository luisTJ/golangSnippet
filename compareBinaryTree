package main

import "golang.org/x/tour/tree"
import "fmt"
import "strconv"

// Walk walks the tree t sending all values
// from the tree to the channel ch.
func Walk(t *tree.Tree, ch chan int, name string) {

	defer close(ch)
	var walk func(t *tree.Tree, ch chan int, name string)
	walk = func(t *tree.Tree, ch chan int, name string) {
		if t.Left != nil {
			walk(t.Left, ch, name)
		}
		fmt.Println(name + ": " + strconv.Itoa(t.Value))
		ch <- t.Value
		if t.Right != nil {
			walk(t.Right, ch, name)
		}
		if t.Left == nil && t.Right == nil {
			return
		}
	}

	walk(t, ch, name)
}

// Same determines whether the trees
// t1 and t2 contain the same values.
func Same(t1, t2 *tree.Tree) bool {
	ch1 := make(chan int)
	ch2 := make(chan int)

	go Walk(t1, ch1, "ch1")
	go Walk(t2, ch2, "ch2")

	for i := range ch1 {
		if i != <-ch2 {
			return false
		}
	}

	_, ok1 := <-ch1
	_, ok2 := <-ch2
	return ok1 == ok2
}

func main() {
	var t1 *tree.Tree
	t2 := tree.New(1)
	t1 = tree.New(1)
	fmt.Println(Same(t1, t2))
}
